name: Attempted Credential Dump From Registry via Reg exe
id: 14038953-e5f2-4daf-acff-5452062baf03
version: 2
date: '2021-11-29'
author: Jose Hernandez, Splunk
type: TTP
datamodel:
- Endpoint_Processes
description: The following analytic identifies the use of `reg.exe` attempting to
  export Windows registry keys that contain hashed credentials. Adversaries will utilize
  this technique to capture and perform offline password cracking.
search: '
| from enriched_source()
| eval timestamp=parse_long(ucast(map_get(input_event,"time"), "string", null))
| eval process.file.name=lower(ucast(map_get(map_get(map_get(input_event, "name"), "file"), "process"), "string", null))
     , process.cmd_line=ucast(map_get(map_get(input_event, "cmd_line"), "process"),"string", null)
     , actor_process.file.name=ucast(map_get(map_get(map_get(input_event, "name"), "file"), "actor_process"), "string", null)  
| where process.file.name="cmd.exe" 
     OR process.file.name="reg.exe"
| where  process.cmd_line != null  
     AND match_regex(process.cmd_line, /(?i)save\s+/)=true 
     AND ( match_regex(process.cmd_line, /(?i)HKLM\\Security/)=true 
          OR match_regex(process.cmd_line, /(?i)HKLM\\SAM/)=true 
          OR match_regex(process.cmd_line, /(?i)HKLM\\System/)=true 
          OR match_regex(process.cmd_line, /(?i)HKEY_LOCAL_MACHINE\\Security/)=true
          OR match_regex(process.cmd_line, /(?i)HKEY_LOCAL_MACHINE\\SAM/)=true 
          OR match_regex(process.cmd_line, /(?i)HKEY_LOCAL_MACHINE\\System/)=true )

| eval body=create_map(
    "category_uid", 1,  !!! hardcoded 
    "class_uid", 1014,   !!! harcoded
    "count", 1   !!! hardcoded (at least for SRS)
    "detection_start_time", timestamp, !!! from input_event
    "detection_end_time", timestamp,   !!! from input_event
    "device_entities", [
      create_map(
        "uid", ucast(map_get(input_event, "dest_device_id"), "string", null),  !!! from input_event !!! ??? Is dest_device_id correct ???
        "type_id", 0   ??? Does IDG provide this ??? FROM INPUT EVENT
      )
    ],
    "disposition_id", 1,   !!! hardcoded
    "enrichments": [
        create_map("es",
            create_map( 
                "process_name", process.file.name,
                "more", more
        )
    ],
    "end_time", timestamp, !!! from input_event
    "event_uid", 101401,   !!! hardcoded 
    "event_time", strftime(timestamp, "%Y-%m-%dT%H:%M:%S.%6QZ"),  ??? Does SRS SPL2 support strftime ???  ??? Radka - Shouldn't this be a field my OCSF translator ??? 
    "finding", create_map(
      "confidence", 90, !!! From YAML
      "confidence_id", 3,  !!! From YAML with CI/CD
      "context_ids", [10, 46],  !!! FROM YAML with CI/CD help
      "impact", 70, !!! From YAML
      "impact_id", 4, !!! From YAML with CI/CD
      "kill_chain_phase", "Actions on Objectives",  !!! From YAML !!! ??? Should this be an array ???
      "kill_chain_phase_id", 7, !!! From YAML with CI/CD help!!!! ??? Should this be an array ???
      "risk_level", "High", !!! From YAML with CI/CD
      "risk_level_id", 3, !!! From YAML with CI/CD
      "risk_score", 63, !!! From YAML with CI/CD
      "type_id", 1, !!! Hard coded
      "uid", "I don't think we can generate a uid in spl2", !!! BA provided, optional field
    ),
    "message", "An attempt to save registry keys storing credentials has been performed on $dest_device_id$ by $dest_user_id$ via process $process_name$.",  ??? Where does token replacement happen ???
    "metadata", create_map(
       "log_name", "Endpoint_Processes",  !!! YAML OCSF Class name?
       "version", "1.0.0"),   !!! YAML or hardcoded  OCSF Version???
    "observables", [   !!!! FROM YAML with CI/CD help !!! ??? Do we need to add device_id, user_id ???
       create_map(
         "name", "actor_process.file.name",
         "role_ids", [5],
         "type_id", 17,
         "value", actor_process.file.name
       ),
       create_map(
         "name", "process.file.name", process_name
         "role_ids", [6],
         "type_id", 17,
         "value", process.file.name
       ),
       create_map(
         "name", "process.cmd_line",
         "role_ids", [6],
         "type_id", 16,
         "value", process.cmd_line
       )
       create_map(     ??????? what would we do with process ID ??????
         "name", "process.id",
         "role_ids", [6],
         "type_id", 16,
         "value", process
       )
    ],
    "origin", create_map(  !!!! Hardcoded  !!!!
      "product", create_map(
        "name", "Splunk Behavioral Analytics"
      )
    ),
    "rule", create_map(
      "name", "Attempted Credential Dump From Registry via Reg exe",
      "uid", "UID FROM YAML"
    ),
    "start_time", timestamp,  !!! from input_event
    "time", timestamp, !!! from input_event
    "user_entities", [
      create_map(
        "uid", ucast(map_get(input_event, "dest_user_id"), "string", null)  !!! from input_event
      )
    ]
    )
| into write_ssa_finding_events();'
how_to_implement: To successfully implement this search, you need to be ingesting
  logs with the process name, parent process, and command-line executions from your
  endpoints. If you are using Sysmon, you must have at least version 6.0.4 of the
  Sysmon TA.
known_false_positives: None identified.
references:
- https://github.com/splunk/security_content/blob/55a17c65f9f56c2220000b62701765422b46125d/detections/attempted_credential_dump_from_registry_via_reg_exe.yml
- https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.002/T1003.002.md#atomic-test-1---registry-dump-of-sam-creds-and-secrets
tags:
  analytic_story:
  - Credential Dumping
  asset_type: Endpoint
  cis20:
  - CIS 3
  - CIS 5
  - CIS 16
  confidence: 90
  context:
  - Source:Endpoint
  - Stage:Credential Access
  impact: 70
  kill_chain_phases:
  - Actions on Objectives
  message: An attempt to save registry keys storing credentials has been performed
    on $dest_device_id$ by $dest_user_id$ via process $process_name$.
  mitre_attack_id:
  - T1003
  - T1003.002
  nist:
  - DE.CM
  observable:
  - name: dest_user_id
    type: User
    role:
    - Actor
  - name: dest_device_id
    type: Hostname
    role:
    - Victim
  - name: process.file.name
    type: Process
    role:
    - Child Process
    cim: process_name
  product:
  - Splunk Behavioral Analytics
  required_fields:
  - process.file.name
  - _time
  - dest_device_id
  - dest_user_id
  - process.cmd_line
  - cmd_line
  risk_score: 63
  risk_severity: medium
  security_domain: endpoint
